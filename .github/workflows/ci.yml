name: Trading System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Safety defaults for CI environment
  DRY_RUN: "1"
  USE_NOWNODES: "0"
  EXEC_MODE: "paper"

jobs:
  # Stage 1: Fast unit tests
  unit-tests:
    name: "Stage 1: Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run unit tests (Stage 1)
      run: |
        echo "üß™ Running Stage 1: Unit Tests (fast, no external dependencies)"
        pytest -m "not integration" --maxfail=5 --durations=20 --tb=short --strict-markers
        
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          .pytest_cache/
          pytest.log
          
  # Stage 2: Integration tests (with services)
  integration-tests:
    name: "Stage 2: Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Wait for Redis
      run: |
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        
    - name: Run integration tests (Stage 2)
      run: |
        echo "üß™ Running Stage 2: Integration Tests (Redis, APIs, connectors)"
        pytest -m "integration" --maxfail=5 --durations=20 --tb=short --strict-markers
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          .pytest_cache/
          pytest.log

  # Stage 3: Soak tests (long-running, only on main branch or manual)
  soak-tests:
    name: "Stage 3: Soak Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Wait for Redis
      run: |
        timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        
    - name: Run soak tests (Stage 3)
      run: |
        echo "üß™ Running Stage 3: Soak Tests (long-running, nightly builds)"
        pytest -m "soak" --maxfail=5 --durations=20 --tb=short --strict-markers
        
    - name: Upload soak test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soak-test-results
        path: |
          .pytest_cache/
          pytest.log

  # Coverage analysis (runs after unit tests)
  coverage:
    name: "Coverage Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run tests with coverage
      run: |
        echo "üìä Running coverage analysis with 75% threshold"
        pytest -m "not integration and not soak" --cov=src --cov-fail-under=75 --cov-report=term-missing --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload coverage results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-results
        path: |
          coverage.xml
          htmlcov/

  # Optional NOWNodes tests (only when explicitly enabled)
  nownodes-tests:
    name: "NOWNodes Tests (Optional)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: unit-tests
    if: github.event_name == 'workflow_dispatch'
    
    env:
      USE_NOWNODES: "1"
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio websockets
        
    - name: Run NOWNodes tests
      run: |
        echo "üß™ Running NOWNodes tests (USE_NOWNODES=1)"
        pytest -m "nownodes" --maxfail=5 --durations=20 --tb=short --strict-markers

  # Final status check
  ci-success:
    name: "CI Success"
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, coverage]
    if: always()
    
    steps:
    - name: Check CI results
      run: |
        echo "üéØ CI Pipeline Results:"
        echo "- Unit Tests: ${{ needs.unit-tests.result }}"
        echo "- Integration Tests: ${{ needs.integration-tests.result }}"
        echo "- Coverage: ${{ needs.coverage.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" && 
              "${{ needs.coverage.result }}" == "success" ]]; then
          echo "‚úÖ All required CI stages passed!"
        else
          echo "‚ùå Some CI stages failed"
          exit 1
        fi