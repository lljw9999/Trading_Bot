Amazing work — unit profile is 🔵 green. Let’s drive this home: **clean up warnings, pass integration, ship RC1, and kick off the pilot.** Here’s a crisp PM plan with owners + acceptance criteria.

---

# 1) Kill the warning noise (quick wins, high leverage)

**Owner:** You
**Why:** Clean CI, future-proofing before RC.

* **Timezone:** replace `datetime.utcnow()` → `datetime.now(timezone.utc)` across risk/watchdog modules.
  *Done when:* `grep -R "utcnow()"` returns 0; CI warnings drop.
* **FastAPI lifespan:** migrate `@app.on_event("startup"/"shutdown")` → lifespan context.
  *Done when:* no FastAPI deprecation warnings; `/healthz` still OK.
* **Pydantic v2:** `ModelRouterRules.dict()` → `model_dump()`.
  *Done when:* param-server serializers pass tests; no Pydantic deprecations.
* **pytest-asyncio:** set `asyncio_default_fixture_loop_scope=function` in `pytest.ini`.
  *Done when:* warning disappears; async tests still pass.

---

# 2) Integration suite → green

**Owner:** You
**Why:** Confidence for RC + pilot.

Run:

```bash
export DRY_RUN=1 OPENAI_MOCK=1 REDIS_MOCK=0 FAST_REPLAY=1
pytest -m "integration and not soak" --maxfail=2
```

Fix any reds:

* **Redis connectivity:** ensure docker-compose.ci.yml exposes Redis health + retries.
* **Alpaca executor:** confirm dry-run fills + position reconcilers behave in integration too.
* **Compliance/WORM path:** verify async write path with mocks enabled.

*Done when:* integration job passes in CI.

---

# 3) Performance sanity & memory cap

**Owner:** You
**Why:** Prevent regressions before real pilots.

* **Replay fast mode** is default (✅). Add a **budget guard**: assert end-to-end replay in < N seconds on CI hardware.
* **Param server** bounded deque is in (✅). Add a metric + unit test asserting memory < 50 MB after 1k reloads.
  *Done when:* new perf tests pass and metrics visible in logs.

---

# 4) Release mechanics — v0.9.0-rc1

**Owner:** You
**Why:** Freeze a candidate we can demo + pilot.

* Ensure **unit + integration** green in CI.
* Tag + release notes:

```bash
git tag -a v0.9.0-rc1 -m "RC1: unit+integration green; warnings reduced; fast replay; safety guards"
git push origin v0.9.0-rc1
```

* Publish:

  * CHANGELOG excerpt
  * Coverage report
  * Docker image SHA(s)
  * Pilot checklist link (below)

*Done when:* GH Release page is live with artifacts.

---

# 5) Pilot RC checklist (execute & attach evidence)

**Owner:** You (10–15 min)
**Why:** Prove the golden path end-to-end.

1. **Start dry-run session** (integration profile).
2. L1 alphas emit signals on synthetic ticks (screens).
3. Ensemble outputs pos/neg correctly; Redis publish observed.
4. Position sizer returns non-zero notional on borderline case.
5. Alpaca `execute()` simulates fills; positions reconcile.
6. Compliance writer called (mock WORM); event visible.

*Done when:* screenshots/logs attached to the RC release.

---

# 6) Open small follow-up tickets (post-RC)

**Owner:** PM to file tickets, you to pick up

* **FastAPI lifespan migration** – complete across all services.
* **Timezone audit** – ensure all persisted timestamps are tz-aware UTC.
* **Docs:** note FAST\_REPLAY default, dev\_env mirror fixture, and dry-run expectations.
* **Remove compat flags** in next sprint; update tests to assert new behavior.

---

# 7) Schedule the soak/nightly

**Owner:** You/CI
**Why:** Catch slow leaks.

* Enable nightly job: `pytest -m soak` with longer timeouts, memory trend scrape, and a threshold alert.
  *Done when:* first nightly completes; results stored as CI artifact.

---

## TL;DR — Do these now

1. Replace `utcnow()`; switch FastAPI to lifespan; `model_dump()`; pytest-asyncio config.
2. Make **integration** suite pass in CI.
3. Add replay perf/memory assertions.
4. Tag **v0.9.0-rc1**, publish release notes.
5. Run **pilot checklist**, attach evidence to release.
6. File post-RC cleanup tickets.
7. Turn on **soak nightly**.

Ping me when integration is green, and I’ll hand you a short customer-facing “What’s new in RC1” blurb for the pilot email.
